{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1BBX9CvNKYm9UQpAaMDuFBlMvTjZ-fDbk","timestamp":1674559199509}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"zJRubet-tHkI"},"source":["# Clasificación Binaria mediante Regresión Logística"]},{"cell_type":"markdown","metadata":{"id":"ZFR0DHWUktwB"},"source":["Vamos a utilizar para este ejemplo el Breast Cancer Wisconsin disponible en la librería Scikit-learn. En el a partir de una serie de características extraidas del análisis de las celúlas provinientes de una biopsia se intenta establecer un modelo que prediga si corresponde a células cancerígenas o no."]},{"cell_type":"markdown","metadata":{"id":"ru22Niq7lFHJ"},"source":["El proceso de trabajo y de aplicación de este clasificador va a ser muy semejante al aplicado con otros modelos (kNN, RandomForests, etc)\n"]},{"cell_type":"markdown","metadata":{"id":"JyoHvmcBlNEO"},"source":["## 0. Carga de Datos\n","\n","El conjunto de datos de digits es uno de los conjuntos de datos con los que viene scikit-learn por lo que no va requerir descarga  alguna de ningún archivo de algún sitio web externo. "]},{"cell_type":"code","metadata":{"id":"PdzWmUsukgI_","executionInfo":{"status":"ok","timestamp":1674559260428,"user_tz":-60,"elapsed":239,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"}}},"source":["from sklearn.datasets import load_breast_cancer\n","data = load_breast_cancer()"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AIjE4J8Zld_F"},"source":["Para comprobar que lo hemos cargado correctamente consultamos la configuración de datos de entrada y de salida (*target*)."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sP4-Mw_2o4RB","executionInfo":{"status":"ok","timestamp":1674559260702,"user_tz":-60,"elapsed":31,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"}},"outputId":"e673ffdd-8ccd-48f5-fad2-7440375a21be"},"source":["data.data.shape"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(569, 30)"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5wfaBCeOn2kq","executionInfo":{"status":"ok","timestamp":1674559260704,"user_tz":-60,"elapsed":27,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"}},"outputId":"f3fc15e0-65c0-4f55-ea30-39b2a9f52474"},"source":["data.target"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n","       0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n","       1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0,\n","       1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1,\n","       1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,\n","       0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n","       1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0,\n","       0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,\n","       1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1,\n","       1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n","       0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,\n","       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n","       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1,\n","       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1,\n","       1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n","       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n","       1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1,\n","       1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"Zh-DtOAqmCi2"},"source":["## 1. Preproceso"]},{"cell_type":"markdown","metadata":{"id":"Ua5evOKKmSF7"},"source":["1. Como en todo proceso de aprendizaje supervisado dividimos nuestros datos en entrenamiento y test."]},{"cell_type":"code","metadata":{"id":"J3r-5G8rmHF-","executionInfo":{"status":"ok","timestamp":1674559260705,"user_tz":-60,"elapsed":18,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"}}},"source":["from sklearn.model_selection import train_test_split\n","x_train, x_test, y_train, y_test = train_test_split(data.data, \n","                                                    data.target, \n","                                                    test_size=0.25, \n","                                                    random_state=0)"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4TD-zvwJri_O"},"source":["2. Posteriormente procedemos a estandarizar las entradas numéricas con las que contamos. Este es un proceso muy recomendable para la aplicación de la regresión logística. "]},{"cell_type":"code","metadata":{"id":"lB2nR_zCrHmf","executionInfo":{"status":"ok","timestamp":1674559260985,"user_tz":-60,"elapsed":295,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"}}},"source":["from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler().fit(x_train)\n","x_train = scaler.transform(x_train)\n","x_test = scaler.transform(x_test)"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aCxtC_fTmati"},"source":["## 2. Entrenamiento"]},{"cell_type":"markdown","metadata":{"id":"Luq6ilWlmdLv"},"source":["1. Importar el modelo a utilizar (*LogisticRegression*)"]},{"cell_type":"code","metadata":{"id":"T78tbOzVmicS","executionInfo":{"status":"ok","timestamp":1674559260989,"user_tz":-60,"elapsed":53,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"}}},"source":["from sklearn.linear_model import LogisticRegression"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6DpZONiamlAn"},"source":["2. Construir la instancia del modelo a partir de hiper-parámetros especificados o por defecto"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l2cplPb1mqWe","executionInfo":{"status":"ok","timestamp":1674559260991,"user_tz":-60,"elapsed":53,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"}},"outputId":"1f1f7c8e-4d99-43d6-eb63-b203604103fd"},"source":["regressor = LogisticRegression()\n","regressor"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression()"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"ITsE2WEUm25L"},"source":["3. Realizar el entrenamiento (*fit*) con los datos seleccionados para la tarea"]},{"cell_type":"code","metadata":{"id":"FmyuvxWAm8Ee","executionInfo":{"status":"ok","timestamp":1674559260993,"user_tz":-60,"elapsed":49,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"}}},"source":["model = regressor.fit(x_train, y_train)\n"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8eBq-rKunrCN"},"source":["Mostramos los coeficientes"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mVynOxQgnflf","executionInfo":{"status":"ok","timestamp":1674559260995,"user_tz":-60,"elapsed":48,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"}},"outputId":"48b21c7b-70c7-452c-bb32-ee577d5ce7e8"},"source":["model.coef_"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.29792942, -0.58056355, -0.3109406 , -0.377129  , -0.11984232,\n","         0.42855478, -0.71131106, -0.85371164, -0.46688191,  0.11762548,\n","        -1.38262136,  0.0899184 , -0.94778563, -0.94686238,  0.18575731,\n","         0.99305313,  0.11090349, -0.3458275 ,  0.20290919,  0.80470317,\n","        -0.91626377, -0.91726667, -0.8159834 , -0.86539197, -0.45539191,\n","         0.10347391, -0.83009341, -0.98445173, -0.5920036 , -0.61086989]])"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"ZAPQlyWMndjq"},"source":["# Predicción y Evaluación\n","\n","predictions = logisticRegr.predict(x_test)"]},{"cell_type":"code","metadata":{"id":"XCjmIX4vprW4","executionInfo":{"status":"ok","timestamp":1674559260997,"user_tz":-60,"elapsed":37,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"}}},"source":["y_pred = regressor.predict(x_test)"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nSA8ThqrpbE9"},"source":["Vamos a ver cómo se comporta el model en los datos de test, utilizando el valor de la exactitud o accuracy (fracción de predicciones correctas): predicciones correctas / número total de elementos"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aBXlx750pPvi","executionInfo":{"status":"ok","timestamp":1674559260998,"user_tz":-60,"elapsed":37,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"}},"outputId":"22e7cd86-d4b1-4645-bb72-367f925e9fe4"},"source":["score = regressor.score(x_test, y_test)\n","print(score)"],"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["0.958041958041958\n"]}]},{"cell_type":"markdown","metadata":{"id":"bG_JpIEqqRZ2"},"source":["\n","\n","Podremos observar también la matriz de confusión en modo texto."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"62Se0rUrpnsE","executionInfo":{"status":"ok","timestamp":1674559261538,"user_tz":-60,"elapsed":571,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"}},"outputId":"5beeebec-78b8-4c75-bfae-f552db858b82"},"source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn import metrics\n","cm = metrics.confusion_matrix(y_test, y_pred)\n","print(cm)"],"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["[[50  3]\n"," [ 3 87]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"5m7wkY16qUk-"},"source":["O en modo gráfico utilizando seaborn."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":520},"id":"KigC-PDZp-Cs","executionInfo":{"status":"ok","timestamp":1674559261844,"user_tz":-60,"elapsed":308,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"}},"outputId":"d1ef8051-31f0-43ee-cb46-2a1e49aafd1c"},"source":["plt.figure(figsize=(9,9))\n","sns.heatmap(cm, annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r');\n","plt.ylabel('Valor Real');\n","plt.xlabel('Valor Predicho');\n","all_sample_title = 'Exactitud: {0}'.format(score)\n","plt.title(all_sample_title, size = 15);"],"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 648x648 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}
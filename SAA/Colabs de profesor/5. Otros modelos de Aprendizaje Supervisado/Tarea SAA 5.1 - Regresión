{"cells":[{"cell_type":"markdown","metadata":{"id":"Ti5Wnz3cgkRD"},"source":["#  El Problema"]},{"cell_type":"markdown","metadata":{"id":"3wbjJ1PrhsIJ"},"source":["\n","Se utilizará como **marco de trabajo** la competición que sobre este problema está propuesta dentro de DrivenData, concretamente en [enlace](https://www.drivendata.org/competitions/44/dengai-predicting-disease-spread/). Para participar será necesario registrarse en la plataforma y seguir las instrucciones correspondientes. \n","\n","El **objetivo del trabajo** de evaluación es crear un modelo mediante técnicas de aprendizaje supervisado que sirva para la predicción sobre los casos de dengue en una semana a partir de los datos metereológicos de la misma. Estos datos provien de dos ciudades distintas, por un lado San Juan de Puerto Rico y por otro Iquitos (Perú). \n","\n","\n","**Entregable**: Se deberá entregar el fichero .ipynb (se puede descargar desde Google Colab Archivo --\u003e Descargar --\u003e Descargar .ipynb) que contenga el código para la resolución del problema así como las explicaciones pertinentes y el resultado obtenido en la competición. \n","\n","El cuaderno actual se puede utilizar de base para la realización del trabajo dado que incluye temas como la carga de datos y la generación de los resultados para envíar que serán útiles en la competición y van más allá del propio aprendizaje supervisado.\n","\n","Los datos también se pueden acceder desde este [enlace](https://drive.google.com/drive/folders/1KHpvew3wO4ww3C1UYsv222BnIhoA8Fff?usp=sharing)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Yo0x5dyH5b4N"},"source":["# Preliminares"]},{"cell_type":"markdown","metadata":{"id":"EqpW7cG5n4HB"},"source":["Antes de empezar cualquier análisis hay que asegurar que las librerías básicas y de uso general (numpy, pandas, etc.) están correctamente importadas. "]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":1959,"status":"ok","timestamp":1674559949028,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"},"user_tz":-60},"id":"QcqAjsMIKluO"},"outputs":[],"source":["# carga de datos\n","import pandas as pd\n","import io\n","from google.colab import files\n","# manipulación y visualización\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import itertools\n","import seaborn as sns\n","\n"]},{"cell_type":"markdown","metadata":{"id":"O5FUdTFrT1Ln"},"source":["# Carga de Datos"]},{"cell_type":"markdown","metadata":{"id":"fHK42bNcT1Lr"},"source":["En primer lugar subimos los datos de entrenamiento sin campo objetivo (dengue_features_train)\n"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":498},"executionInfo":{"elapsed":389,"status":"ok","timestamp":1674559949385,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"},"user_tz":-60},"id":"yjFl0AKCV7c5","outputId":"acfa15e5-c86c-4b10-aa03-bc727312967d"},"outputs":[{"name":"stdout","output_type":"stream","text":["--2023-01-24 11:32:28--  https://raw.githubusercontent.com/curso-iabd-uclm/machinelearning/main/datasets/dengue/dengue_features_train.csv\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.111.133, 185.199.110.133, 185.199.108.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.111.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 287139 (280K) [text/plain]\n","Saving to: ‘dengue_features_train.csv’\n","\n","dengue_features_tra 100%[===================\u003e] 280.41K  --.-KB/s    in 0.03s   \n","\n","2023-01-24 11:32:28 (8.34 MB/s) - ‘dengue_features_train.csv’ saved [287139/287139]\n","\n"]},{"data":{"text/html":["\n","  \u003cdiv id=\"df-2eecec13-966d-4c48-bd97-c60b95cf483a\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003ecity\u003c/th\u003e\n","      \u003cth\u003eyear\u003c/th\u003e\n","      \u003cth\u003eweekofyear\u003c/th\u003e\n","      \u003cth\u003eweek_start_date\u003c/th\u003e\n","      \u003cth\u003endvi_ne\u003c/th\u003e\n","      \u003cth\u003endvi_nw\u003c/th\u003e\n","      \u003cth\u003endvi_se\u003c/th\u003e\n","      \u003cth\u003endvi_sw\u003c/th\u003e\n","      \u003cth\u003eprecipitation_amt_mm\u003c/th\u003e\n","      \u003cth\u003ereanalysis_air_temp_k\u003c/th\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003cth\u003ereanalysis_precip_amt_kg_per_m2\u003c/th\u003e\n","      \u003cth\u003ereanalysis_relative_humidity_percent\u003c/th\u003e\n","      \u003cth\u003ereanalysis_sat_precip_amt_mm\u003c/th\u003e\n","      \u003cth\u003ereanalysis_specific_humidity_g_per_kg\u003c/th\u003e\n","      \u003cth\u003ereanalysis_tdtr_k\u003c/th\u003e\n","      \u003cth\u003estation_avg_temp_c\u003c/th\u003e\n","      \u003cth\u003estation_diur_temp_rng_c\u003c/th\u003e\n","      \u003cth\u003estation_max_temp_c\u003c/th\u003e\n","      \u003cth\u003estation_min_temp_c\u003c/th\u003e\n","      \u003cth\u003estation_precip_mm\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003ctd\u003esj\u003c/td\u003e\n","      \u003ctd\u003e1990\u003c/td\u003e\n","      \u003ctd\u003e18\u003c/td\u003e\n","      \u003ctd\u003e1990-04-30\u003c/td\u003e\n","      \u003ctd\u003e0.122600\u003c/td\u003e\n","      \u003ctd\u003e0.103725\u003c/td\u003e\n","      \u003ctd\u003e0.198483\u003c/td\u003e\n","      \u003ctd\u003e0.177617\u003c/td\u003e\n","      \u003ctd\u003e12.42\u003c/td\u003e\n","      \u003ctd\u003e297.572857\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e32.00\u003c/td\u003e\n","      \u003ctd\u003e73.365714\u003c/td\u003e\n","      \u003ctd\u003e12.42\u003c/td\u003e\n","      \u003ctd\u003e14.012857\u003c/td\u003e\n","      \u003ctd\u003e2.628571\u003c/td\u003e\n","      \u003ctd\u003e25.442857\u003c/td\u003e\n","      \u003ctd\u003e6.900000\u003c/td\u003e\n","      \u003ctd\u003e29.4\u003c/td\u003e\n","      \u003ctd\u003e20.0\u003c/td\u003e\n","      \u003ctd\u003e16.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003esj\u003c/td\u003e\n","      \u003ctd\u003e1990\u003c/td\u003e\n","      \u003ctd\u003e19\u003c/td\u003e\n","      \u003ctd\u003e1990-05-07\u003c/td\u003e\n","      \u003ctd\u003e0.169900\u003c/td\u003e\n","      \u003ctd\u003e0.142175\u003c/td\u003e\n","      \u003ctd\u003e0.162357\u003c/td\u003e\n","      \u003ctd\u003e0.155486\u003c/td\u003e\n","      \u003ctd\u003e22.82\u003c/td\u003e\n","      \u003ctd\u003e298.211429\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e17.94\u003c/td\u003e\n","      \u003ctd\u003e77.368571\u003c/td\u003e\n","      \u003ctd\u003e22.82\u003c/td\u003e\n","      \u003ctd\u003e15.372857\u003c/td\u003e\n","      \u003ctd\u003e2.371429\u003c/td\u003e\n","      \u003ctd\u003e26.714286\u003c/td\u003e\n","      \u003ctd\u003e6.371429\u003c/td\u003e\n","      \u003ctd\u003e31.7\u003c/td\u003e\n","      \u003ctd\u003e22.2\u003c/td\u003e\n","      \u003ctd\u003e8.6\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003ctd\u003esj\u003c/td\u003e\n","      \u003ctd\u003e1990\u003c/td\u003e\n","      \u003ctd\u003e20\u003c/td\u003e\n","      \u003ctd\u003e1990-05-14\u003c/td\u003e\n","      \u003ctd\u003e0.032250\u003c/td\u003e\n","      \u003ctd\u003e0.172967\u003c/td\u003e\n","      \u003ctd\u003e0.157200\u003c/td\u003e\n","      \u003ctd\u003e0.170843\u003c/td\u003e\n","      \u003ctd\u003e34.54\u003c/td\u003e\n","      \u003ctd\u003e298.781429\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e26.10\u003c/td\u003e\n","      \u003ctd\u003e82.052857\u003c/td\u003e\n","      \u003ctd\u003e34.54\u003c/td\u003e\n","      \u003ctd\u003e16.848571\u003c/td\u003e\n","      \u003ctd\u003e2.300000\u003c/td\u003e\n","      \u003ctd\u003e26.714286\u003c/td\u003e\n","      \u003ctd\u003e6.485714\u003c/td\u003e\n","      \u003ctd\u003e32.2\u003c/td\u003e\n","      \u003ctd\u003e22.8\u003c/td\u003e\n","      \u003ctd\u003e41.4\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003esj\u003c/td\u003e\n","      \u003ctd\u003e1990\u003c/td\u003e\n","      \u003ctd\u003e21\u003c/td\u003e\n","      \u003ctd\u003e1990-05-21\u003c/td\u003e\n","      \u003ctd\u003e0.128633\u003c/td\u003e\n","      \u003ctd\u003e0.245067\u003c/td\u003e\n","      \u003ctd\u003e0.227557\u003c/td\u003e\n","      \u003ctd\u003e0.235886\u003c/td\u003e\n","      \u003ctd\u003e15.36\u003c/td\u003e\n","      \u003ctd\u003e298.987143\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e13.90\u003c/td\u003e\n","      \u003ctd\u003e80.337143\u003c/td\u003e\n","      \u003ctd\u003e15.36\u003c/td\u003e\n","      \u003ctd\u003e16.672857\u003c/td\u003e\n","      \u003ctd\u003e2.428571\u003c/td\u003e\n","      \u003ctd\u003e27.471429\u003c/td\u003e\n","      \u003ctd\u003e6.771429\u003c/td\u003e\n","      \u003ctd\u003e33.3\u003c/td\u003e\n","      \u003ctd\u003e23.3\u003c/td\u003e\n","      \u003ctd\u003e4.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003ctd\u003esj\u003c/td\u003e\n","      \u003ctd\u003e1990\u003c/td\u003e\n","      \u003ctd\u003e22\u003c/td\u003e\n","      \u003ctd\u003e1990-05-28\u003c/td\u003e\n","      \u003ctd\u003e0.196200\u003c/td\u003e\n","      \u003ctd\u003e0.262200\u003c/td\u003e\n","      \u003ctd\u003e0.251200\u003c/td\u003e\n","      \u003ctd\u003e0.247340\u003c/td\u003e\n","      \u003ctd\u003e7.52\u003c/td\u003e\n","      \u003ctd\u003e299.518571\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e12.20\u003c/td\u003e\n","      \u003ctd\u003e80.460000\u003c/td\u003e\n","      \u003ctd\u003e7.52\u003c/td\u003e\n","      \u003ctd\u003e17.210000\u003c/td\u003e\n","      \u003ctd\u003e3.014286\u003c/td\u003e\n","      \u003ctd\u003e28.942857\u003c/td\u003e\n","      \u003ctd\u003e9.371429\u003c/td\u003e\n","      \u003ctd\u003e35.0\u003c/td\u003e\n","      \u003ctd\u003e23.9\u003c/td\u003e\n","      \u003ctd\u003e5.8\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003cp\u003e5 rows × 24 columns\u003c/p\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2eecec13-966d-4c48-bd97-c60b95cf483a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-2eecec13-966d-4c48-bd97-c60b95cf483a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2eecec13-966d-4c48-bd97-c60b95cf483a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["  city  year  weekofyear week_start_date   ndvi_ne   ndvi_nw   ndvi_se  \\\n","0   sj  1990          18      1990-04-30  0.122600  0.103725  0.198483   \n","1   sj  1990          19      1990-05-07  0.169900  0.142175  0.162357   \n","2   sj  1990          20      1990-05-14  0.032250  0.172967  0.157200   \n","3   sj  1990          21      1990-05-21  0.128633  0.245067  0.227557   \n","4   sj  1990          22      1990-05-28  0.196200  0.262200  0.251200   \n","\n","    ndvi_sw  precipitation_amt_mm  reanalysis_air_temp_k  ...  \\\n","0  0.177617                 12.42             297.572857  ...   \n","1  0.155486                 22.82             298.211429  ...   \n","2  0.170843                 34.54             298.781429  ...   \n","3  0.235886                 15.36             298.987143  ...   \n","4  0.247340                  7.52             299.518571  ...   \n","\n","   reanalysis_precip_amt_kg_per_m2  reanalysis_relative_humidity_percent  \\\n","0                            32.00                             73.365714   \n","1                            17.94                             77.368571   \n","2                            26.10                             82.052857   \n","3                            13.90                             80.337143   \n","4                            12.20                             80.460000   \n","\n","   reanalysis_sat_precip_amt_mm  reanalysis_specific_humidity_g_per_kg  \\\n","0                         12.42                              14.012857   \n","1                         22.82                              15.372857   \n","2                         34.54                              16.848571   \n","3                         15.36                              16.672857   \n","4                          7.52                              17.210000   \n","\n","   reanalysis_tdtr_k  station_avg_temp_c  station_diur_temp_rng_c  \\\n","0           2.628571           25.442857                 6.900000   \n","1           2.371429           26.714286                 6.371429   \n","2           2.300000           26.714286                 6.485714   \n","3           2.428571           27.471429                 6.771429   \n","4           3.014286           28.942857                 9.371429   \n","\n","   station_max_temp_c  station_min_temp_c  station_precip_mm  \n","0                29.4                20.0               16.0  \n","1                31.7                22.2                8.6  \n","2                32.2                22.8               41.4  \n","3                33.3                23.3                4.0  \n","4                35.0                23.9                5.8  \n","\n","[5 rows x 24 columns]"]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["!wget https://raw.githubusercontent.com/curso-iabd-uclm/machinelearning/main/datasets/dengue/dengue_features_train.csv\n","train_feat = pd.read_csv(\"/content/dengue_features_train.csv\")\n","train_feat.head()"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27,"status":"ok","timestamp":1674559949388,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"},"user_tz":-60},"id":"JlojDH36T1Lu","outputId":"810882df-ddd8-42ae-a313-43b9ae3dfb81"},"outputs":[{"data":{"text/plain":["(1456, 24)"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["train_feat.shape"]},{"cell_type":"markdown","metadata":{"id":"aWvzTUXWT1Lu"},"source":["Posteriormente subimos los datos que únicamente nos proporcionan el número de casos de dengue para las semanas de entrenamiento (dengue_labels_train)"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":405},"executionInfo":{"elapsed":563,"status":"ok","timestamp":1674559949930,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"},"user_tz":-60},"id":"gWPcwtH9T1Lv","outputId":"824ebe15-7630-4432-e7e5-3410f2999807"},"outputs":[{"name":"stdout","output_type":"stream","text":["--2023-01-24 11:32:29--  https://raw.githubusercontent.com/curso-iabd-uclm/machinelearning/main/datasets/dengue/dengue_labels_train.csv\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.111.133, 185.199.108.133, 185.199.109.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.111.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 19582 (19K) [text/plain]\n","Saving to: ‘dengue_labels_train.csv’\n","\n","\rdengue_labels_train   0%[                    ]       0  --.-KB/s               \rdengue_labels_train 100%[===================\u003e]  19.12K  --.-KB/s    in 0.001s  \n","\n","2023-01-24 11:32:29 (26.1 MB/s) - ‘dengue_labels_train.csv’ saved [19582/19582]\n","\n"]},{"data":{"text/html":["\n","  \u003cdiv id=\"df-bd568ad8-533f-42fd-81b9-7e52d24321fa\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003ecity\u003c/th\u003e\n","      \u003cth\u003eyear\u003c/th\u003e\n","      \u003cth\u003eweekofyear\u003c/th\u003e\n","      \u003cth\u003etotal_cases\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003ctd\u003esj\u003c/td\u003e\n","      \u003ctd\u003e1990\u003c/td\u003e\n","      \u003ctd\u003e18\u003c/td\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003esj\u003c/td\u003e\n","      \u003ctd\u003e1990\u003c/td\u003e\n","      \u003ctd\u003e19\u003c/td\u003e\n","      \u003ctd\u003e5\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003ctd\u003esj\u003c/td\u003e\n","      \u003ctd\u003e1990\u003c/td\u003e\n","      \u003ctd\u003e20\u003c/td\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003esj\u003c/td\u003e\n","      \u003ctd\u003e1990\u003c/td\u003e\n","      \u003ctd\u003e21\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003ctd\u003esj\u003c/td\u003e\n","      \u003ctd\u003e1990\u003c/td\u003e\n","      \u003ctd\u003e22\u003c/td\u003e\n","      \u003ctd\u003e6\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd568ad8-533f-42fd-81b9-7e52d24321fa')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-bd568ad8-533f-42fd-81b9-7e52d24321fa button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-bd568ad8-533f-42fd-81b9-7e52d24321fa');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["  city  year  weekofyear  total_cases\n","0   sj  1990          18            4\n","1   sj  1990          19            5\n","2   sj  1990          20            4\n","3   sj  1990          21            3\n","4   sj  1990          22            6"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["!wget https://raw.githubusercontent.com/curso-iabd-uclm/machinelearning/main/datasets/dengue/dengue_labels_train.csv\n","train_labels = pd.read_csv(\"/content/dengue_labels_train.csv\")\n","train_labels.head()"]},{"cell_type":"markdown","metadata":{"id":"Kpr1eUqeT1Lw"},"source":["Mezclamos los dos conjuntos de datos para tenerlos en un único dataframe"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":299},"executionInfo":{"elapsed":23,"status":"ok","timestamp":1674559949932,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"},"user_tz":-60},"id":"jDRO_YQYT1Lw","outputId":"02663923-cd91-4449-f4c1-48a2066e6b1c"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-6f3f8443-d9c0-41d1-91b8-891e1cb46968\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003ecity\u003c/th\u003e\n","      \u003cth\u003eyear\u003c/th\u003e\n","      \u003cth\u003eweekofyear\u003c/th\u003e\n","      \u003cth\u003eweek_start_date\u003c/th\u003e\n","      \u003cth\u003endvi_ne\u003c/th\u003e\n","      \u003cth\u003endvi_nw\u003c/th\u003e\n","      \u003cth\u003endvi_se\u003c/th\u003e\n","      \u003cth\u003endvi_sw\u003c/th\u003e\n","      \u003cth\u003eprecipitation_amt_mm\u003c/th\u003e\n","      \u003cth\u003ereanalysis_air_temp_k\u003c/th\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003cth\u003ereanalysis_relative_humidity_percent\u003c/th\u003e\n","      \u003cth\u003ereanalysis_sat_precip_amt_mm\u003c/th\u003e\n","      \u003cth\u003ereanalysis_specific_humidity_g_per_kg\u003c/th\u003e\n","      \u003cth\u003ereanalysis_tdtr_k\u003c/th\u003e\n","      \u003cth\u003estation_avg_temp_c\u003c/th\u003e\n","      \u003cth\u003estation_diur_temp_rng_c\u003c/th\u003e\n","      \u003cth\u003estation_max_temp_c\u003c/th\u003e\n","      \u003cth\u003estation_min_temp_c\u003c/th\u003e\n","      \u003cth\u003estation_precip_mm\u003c/th\u003e\n","      \u003cth\u003etotal_cases\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003ctd\u003esj\u003c/td\u003e\n","      \u003ctd\u003e1990\u003c/td\u003e\n","      \u003ctd\u003e18\u003c/td\u003e\n","      \u003ctd\u003e1990-04-30\u003c/td\u003e\n","      \u003ctd\u003e0.122600\u003c/td\u003e\n","      \u003ctd\u003e0.103725\u003c/td\u003e\n","      \u003ctd\u003e0.198483\u003c/td\u003e\n","      \u003ctd\u003e0.177617\u003c/td\u003e\n","      \u003ctd\u003e12.42\u003c/td\u003e\n","      \u003ctd\u003e297.572857\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e73.365714\u003c/td\u003e\n","      \u003ctd\u003e12.42\u003c/td\u003e\n","      \u003ctd\u003e14.012857\u003c/td\u003e\n","      \u003ctd\u003e2.628571\u003c/td\u003e\n","      \u003ctd\u003e25.442857\u003c/td\u003e\n","      \u003ctd\u003e6.900000\u003c/td\u003e\n","      \u003ctd\u003e29.4\u003c/td\u003e\n","      \u003ctd\u003e20.0\u003c/td\u003e\n","      \u003ctd\u003e16.0\u003c/td\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003esj\u003c/td\u003e\n","      \u003ctd\u003e1990\u003c/td\u003e\n","      \u003ctd\u003e19\u003c/td\u003e\n","      \u003ctd\u003e1990-05-07\u003c/td\u003e\n","      \u003ctd\u003e0.169900\u003c/td\u003e\n","      \u003ctd\u003e0.142175\u003c/td\u003e\n","      \u003ctd\u003e0.162357\u003c/td\u003e\n","      \u003ctd\u003e0.155486\u003c/td\u003e\n","      \u003ctd\u003e22.82\u003c/td\u003e\n","      \u003ctd\u003e298.211429\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e77.368571\u003c/td\u003e\n","      \u003ctd\u003e22.82\u003c/td\u003e\n","      \u003ctd\u003e15.372857\u003c/td\u003e\n","      \u003ctd\u003e2.371429\u003c/td\u003e\n","      \u003ctd\u003e26.714286\u003c/td\u003e\n","      \u003ctd\u003e6.371429\u003c/td\u003e\n","      \u003ctd\u003e31.7\u003c/td\u003e\n","      \u003ctd\u003e22.2\u003c/td\u003e\n","      \u003ctd\u003e8.6\u003c/td\u003e\n","      \u003ctd\u003e5\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003ctd\u003esj\u003c/td\u003e\n","      \u003ctd\u003e1990\u003c/td\u003e\n","      \u003ctd\u003e20\u003c/td\u003e\n","      \u003ctd\u003e1990-05-14\u003c/td\u003e\n","      \u003ctd\u003e0.032250\u003c/td\u003e\n","      \u003ctd\u003e0.172967\u003c/td\u003e\n","      \u003ctd\u003e0.157200\u003c/td\u003e\n","      \u003ctd\u003e0.170843\u003c/td\u003e\n","      \u003ctd\u003e34.54\u003c/td\u003e\n","      \u003ctd\u003e298.781429\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e82.052857\u003c/td\u003e\n","      \u003ctd\u003e34.54\u003c/td\u003e\n","      \u003ctd\u003e16.848571\u003c/td\u003e\n","      \u003ctd\u003e2.300000\u003c/td\u003e\n","      \u003ctd\u003e26.714286\u003c/td\u003e\n","      \u003ctd\u003e6.485714\u003c/td\u003e\n","      \u003ctd\u003e32.2\u003c/td\u003e\n","      \u003ctd\u003e22.8\u003c/td\u003e\n","      \u003ctd\u003e41.4\u003c/td\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003esj\u003c/td\u003e\n","      \u003ctd\u003e1990\u003c/td\u003e\n","      \u003ctd\u003e21\u003c/td\u003e\n","      \u003ctd\u003e1990-05-21\u003c/td\u003e\n","      \u003ctd\u003e0.128633\u003c/td\u003e\n","      \u003ctd\u003e0.245067\u003c/td\u003e\n","      \u003ctd\u003e0.227557\u003c/td\u003e\n","      \u003ctd\u003e0.235886\u003c/td\u003e\n","      \u003ctd\u003e15.36\u003c/td\u003e\n","      \u003ctd\u003e298.987143\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e80.337143\u003c/td\u003e\n","      \u003ctd\u003e15.36\u003c/td\u003e\n","      \u003ctd\u003e16.672857\u003c/td\u003e\n","      \u003ctd\u003e2.428571\u003c/td\u003e\n","      \u003ctd\u003e27.471429\u003c/td\u003e\n","      \u003ctd\u003e6.771429\u003c/td\u003e\n","      \u003ctd\u003e33.3\u003c/td\u003e\n","      \u003ctd\u003e23.3\u003c/td\u003e\n","      \u003ctd\u003e4.0\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003ctd\u003esj\u003c/td\u003e\n","      \u003ctd\u003e1990\u003c/td\u003e\n","      \u003ctd\u003e22\u003c/td\u003e\n","      \u003ctd\u003e1990-05-28\u003c/td\u003e\n","      \u003ctd\u003e0.196200\u003c/td\u003e\n","      \u003ctd\u003e0.262200\u003c/td\u003e\n","      \u003ctd\u003e0.251200\u003c/td\u003e\n","      \u003ctd\u003e0.247340\u003c/td\u003e\n","      \u003ctd\u003e7.52\u003c/td\u003e\n","      \u003ctd\u003e299.518571\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e80.460000\u003c/td\u003e\n","      \u003ctd\u003e7.52\u003c/td\u003e\n","      \u003ctd\u003e17.210000\u003c/td\u003e\n","      \u003ctd\u003e3.014286\u003c/td\u003e\n","      \u003ctd\u003e28.942857\u003c/td\u003e\n","      \u003ctd\u003e9.371429\u003c/td\u003e\n","      \u003ctd\u003e35.0\u003c/td\u003e\n","      \u003ctd\u003e23.9\u003c/td\u003e\n","      \u003ctd\u003e5.8\u003c/td\u003e\n","      \u003ctd\u003e6\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003cp\u003e5 rows × 25 columns\u003c/p\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6f3f8443-d9c0-41d1-91b8-891e1cb46968')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-6f3f8443-d9c0-41d1-91b8-891e1cb46968 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6f3f8443-d9c0-41d1-91b8-891e1cb46968');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["  city  year  weekofyear week_start_date   ndvi_ne   ndvi_nw   ndvi_se  \\\n","0   sj  1990          18      1990-04-30  0.122600  0.103725  0.198483   \n","1   sj  1990          19      1990-05-07  0.169900  0.142175  0.162357   \n","2   sj  1990          20      1990-05-14  0.032250  0.172967  0.157200   \n","3   sj  1990          21      1990-05-21  0.128633  0.245067  0.227557   \n","4   sj  1990          22      1990-05-28  0.196200  0.262200  0.251200   \n","\n","    ndvi_sw  precipitation_amt_mm  reanalysis_air_temp_k  ...  \\\n","0  0.177617                 12.42             297.572857  ...   \n","1  0.155486                 22.82             298.211429  ...   \n","2  0.170843                 34.54             298.781429  ...   \n","3  0.235886                 15.36             298.987143  ...   \n","4  0.247340                  7.52             299.518571  ...   \n","\n","   reanalysis_relative_humidity_percent  reanalysis_sat_precip_amt_mm  \\\n","0                             73.365714                         12.42   \n","1                             77.368571                         22.82   \n","2                             82.052857                         34.54   \n","3                             80.337143                         15.36   \n","4                             80.460000                          7.52   \n","\n","   reanalysis_specific_humidity_g_per_kg  reanalysis_tdtr_k  \\\n","0                              14.012857           2.628571   \n","1                              15.372857           2.371429   \n","2                              16.848571           2.300000   \n","3                              16.672857           2.428571   \n","4                              17.210000           3.014286   \n","\n","   station_avg_temp_c  station_diur_temp_rng_c  station_max_temp_c  \\\n","0           25.442857                 6.900000                29.4   \n","1           26.714286                 6.371429                31.7   \n","2           26.714286                 6.485714                32.2   \n","3           27.471429                 6.771429                33.3   \n","4           28.942857                 9.371429                35.0   \n","\n","   station_min_temp_c  station_precip_mm  total_cases  \n","0                20.0               16.0            4  \n","1                22.2                8.6            5  \n","2                22.8               41.4            4  \n","3                23.3                4.0            3  \n","4                23.9                5.8            6  \n","\n","[5 rows x 25 columns]"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["train = pd.merge(train_feat,train_labels,on=['city', 'year', 'weekofyear'])\n","train.head()\n"]},{"cell_type":"markdown","metadata":{"id":"gXy9mkxn7yIh"},"source":["Finalmente subimos los datos para generar la evaluación final (dengue_features_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"vUWoUirN8TQ7"},"outputs":[],"source":["!wget https://raw.githubusercontent.com/curso-iabd-uclm/machinelearning/main/datasets/dengue/dengue_features_test.csv\n","test = pd.read_csv(\"/content/dengue_features_test.csv\")\n","test.head()"]},{"cell_type":"markdown","metadata":{"id":"fvxDPxPhheSW"},"source":["# Carga de Datos"]},{"cell_type":"markdown","metadata":{"id":"AygZwiVvg6WE"},"source":["En primer lugar cargamos los datos dentro del entorno con las funcionalidades que nos permite Google Colab"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":39,"status":"ok","timestamp":1674559950183,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"},"user_tz":-60},"id":"6CRmTmk-6Mc2"},"outputs":[],"source":["def upload_files ():\n","  uploaded = files.upload()\n","  for fn in uploaded.keys():\n","    print('User uploaded file \"{name}\" with length {length} bytes'.format(\n","        name=fn, length=len(uploaded[fn])))\n","    df = pd.read_csv(io.StringIO(uploaded[fn].decode('utf-8')))\n","    return df"]},{"cell_type":"markdown","metadata":{"id":"hzKJCzUU61r6"},"source":["En primer lugar subimos los datos de entrenamiento sin campo objetivo (dengue_features_train)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":38},"id":"CRnebroi6Pwc","outputId":"3b89870a-03a2-42fd-e5c1-86a868c4b4ce"},"outputs":[{"data":{"text/html":["\n","     \u003cinput type=\"file\" id=\"files-605f844d-d766-4b5c-895f-d9fa66018e55\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" /\u003e\n","     \u003coutput id=\"result-605f844d-d766-4b5c-895f-d9fa66018e55\"\u003e\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      \u003c/output\u003e\n","      \u003cscript\u003e// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) =\u003e {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable\u003c!Object\u003e} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) =\u003e {\n","    inputElement.addEventListener('change', (e) =\u003e {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) =\u003e {\n","    cancel.onclick = () =\u003e {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) =\u003e {\n","      const reader = new FileReader();\n","      reader.onload = (e) =\u003e {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position \u003c fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","\u003c/script\u003e "],"text/plain":["\u003cIPython.core.display.HTML object\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["train_feat = upload_files()\n","train_feat.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ceE_zUFBsrUN"},"outputs":[],"source":["train_feat.shape"]},{"cell_type":"markdown","metadata":{"id":"dUXIc3VN7gUE"},"source":["Posteriormente subimos los datos que únicamente nos proporcionan el número de casos de dengue para las semanas de entrenamiento (dengue_labels_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GE8BnvDD7olL"},"outputs":[],"source":["train_labels = upload_files()\n","train_labels.head()"]},{"cell_type":"markdown","metadata":{"id":"_8_EGboS8mVY"},"source":["Mezclamos los dos conjuntos de datos para tenerlos en un único dataframe"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ecIvw87W9A-j"},"outputs":[],"source":["train = pd.merge(train_feat,train_labels,on=['city', 'year', 'weekofyear'])\n","\n","train.head()\n"]},{"cell_type":"markdown","metadata":{"id":"dZSaoCMRAq8m"},"source":["# Preproceso\n","\n","Aquí irían todas las funciones y transformaciones que permitieran el uso de las variables en los siguientes clasificadores, por ejemplo la transformación de las variables categóricas en numéricas, etc."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bSwX3YqgsuYn"},"outputs":[],"source":["train.drop(\"week_start_date\", axis = 1, inplace = True)\n","test.drop(\"week_start_date\", axis = 1, inplace = True)\n","train.head()\n"]},{"cell_type":"markdown","metadata":{"id":"fP6gN2KUtu_l"},"source":["Trataremos los valores perdidos que los hay dado que nos evitarían tener un modelo de los datos que tenemos."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XYMuvLK6t-a8"},"outputs":[],"source":["pd.isnull(train).any()"]},{"cell_type":"markdown","metadata":{"id":"G-86mXnluGtz"},"source":["Los vamos a procesar de forma automática completandolos con el método ffill (con el valor previo)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"XOO6qfz-uTEF"},"outputs":[],"source":["# ffill: propagate last valid observation forward to next valid backfill\n","# Otra Opción: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate\n","train.fillna(method='ffill', inplace=True)\n","pd.isnull(train).any()"]},{"cell_type":"markdown","metadata":{"id":"J0nLd22Ouib1"},"source":["Y aplicamos lo mismo para el test"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"E1x7bkhlucTP"},"outputs":[],"source":["test.fillna(method='ffill', inplace=True)\n","pd.isnull(test).any()"]},{"cell_type":"markdown","metadata":{"id":"fg1E2_kanyqO"},"source":["Para nuestro modelado vamos a utilizar todas las columnas con datos reales que seleccionamos en el siguiente código."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"CwOcLnm9nqOH"},"outputs":[],"source":["selected_features = ['ndvi_ne', 'ndvi_nw', 'ndvi_se',\n","       'ndvi_sw', 'precipitation_amt_mm', 'reanalysis_air_temp_k',\n","       'reanalysis_avg_temp_k', 'reanalysis_dew_point_temp_k',\n","       'reanalysis_max_air_temp_k', 'reanalysis_min_air_temp_k',\n","       'reanalysis_precip_amt_kg_per_m2',\n","       'reanalysis_relative_humidity_percent', 'reanalysis_sat_precip_amt_mm',\n","       'reanalysis_specific_humidity_g_per_kg', 'reanalysis_tdtr_k',\n","       'station_avg_temp_c', 'station_diur_temp_rng_c', 'station_max_temp_c',\n","       'station_min_temp_c', 'station_precip_mm']"]},{"cell_type":"markdown","metadata":{"id":"Rnt_9Hm0I1G_"},"source":["Normalizamos los datos a partir de los coeficientes mínimo y máximo de la colección de entrenamiento.\n","\n","**(Es opcional y no siempre efectivo)**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"shQ7RDGT8JMv"},"outputs":[],"source":["from sklearn.preprocessing import MinMaxScaler\n","# performin min-max scaling each continuous feature column to the range [0, 1]\n","scaler = MinMaxScaler()\n","X_train = scaler.fit_transform(train[selected_features])\n","X_test = scaler.transform(test[selected_features])\n","y_train = train['total_cases']\n"]},{"cell_type":"markdown","metadata":{"id":"DHn4PMedwQwi"},"source":["# Construcción y evaluación preliminar del modelo"]},{"cell_type":"markdown","metadata":{"id":"XGj4Y9-ZoApt"},"source":["Vamos a crear un modelo de regresión lineal básica a partir de estos datos."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"SeFitaCqEJGS"},"outputs":[],"source":["from sklearn import linear_model\n","regr = linear_model.LinearRegression()\n","regr.fit(X_train, y_train)\n"]},{"cell_type":"markdown","metadata":{"id":"CNQ5KGsMpBxp"},"source":["Podemos suponer que los coeficientes representan la importancia de las variable, lo cual nos puede permitir seleccionar un top k variables que alimenten a otros modelos. "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"X0LuxrVVmlYd"},"outputs":[],"source":["print (\"Coeff and intercept:\", regr.coef_ , regr.intercept_)\n","ind = np.argsort(np. abs(regr.coef_))\n","print (\"(Ordenadas de menor a mayor importancia:)\")\n","print (np.array(selected_features)[ind])"]},{"cell_type":"markdown","metadata":{"id":"NdKirlPYpMFs"},"source":["Los coeficientes de una regresión lineal pueden tener unas dimensiones muy diversas y no ser del todo útiles (además de tender al sobreaprendizaje). Para evitar este problema se utiliza la regularización. La regularización Lasso va a hacer que las variables menos importantes tengan coeficientes cero dejando únicamente la participación en las decisiones a las variables que considera más decisivas.\n","\n","- Parametro *alpha*: "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"H7OMGy3fmqp7"},"outputs":[],"source":["from sklearn. linear_model import Lasso\n","regr_lasso = linear_model.Lasso(alpha = .3)\n","regr_lasso.fit( X_train , y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"9LcB_bRkmzMI"},"outputs":[],"source":["print (\"Coeff and intercept:\", regr_lasso.coef_ , regr_lasso.intercept_)\n","ind = np.argsort(np. abs(regr_lasso.coef_))\n","print (\"(Ordenadas de menor a mayor importancia:)\")\n","print (np.array(selected_features)[ind])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"9c612DsvqX56"},"outputs":[],"source":["# http://seaborn.pydata.org/generated/seaborn.lmplot.html\n","sns.lmplot(data = train, x = \"ndvi_ne\", y = \"total_cases\",  order = 1) \n","\n"]},{"cell_type":"markdown","metadata":{"id":"hGl_j6A0sUJB"},"source":["Graficamos como ajusta la propia predicción a los datos disponibles."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"RzqykW7Arly6"},"outputs":[],"source":["y_regr_pred = regr.predict(X_train)\n","y_lasso_pred = regr_lasso.predict(X_train)\n","import matplotlib.pyplot as plt\n","\n","plt.scatter(y_train , y_regr_pred , alpha = 0.3)\n","plt.scatter(y_train , y_lasso_pred , alpha = 0.5)\n","#plt.plot([0, 50], [0, 50], \"--k\")\n","plt.axis(\"tight\")\n","plt.xlabel(\"Casos Reales\")\n","plt.ylabel(\"Casos Predichos\")"]},{"cell_type":"markdown","metadata":{"id":"xmpXgZnqtEzc"},"source":["Calculamos las métricas de error"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"O7KQYRdGsaiU"},"outputs":[],"source":["from sklearn import metrics\n","print(\"Regresión Lineal\")\n","print (\"MAE:\", metrics.mean_absolute_error(y_regr_pred , y_train))\n","print(\"Regresión Lasso\")\n","print (\"MAE:\", metrics.mean_absolute_error(y_lasso_pred , y_train))\n"]},{"cell_type":"markdown","metadata":{"id":"2qbkQc-ztqIS"},"source":["# Generación del Resultado Final"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"5BCOOboHnRVM"},"outputs":[],"source":["model = regr_lasso"]},{"cell_type":"markdown","metadata":{"id":"HSXVdRUa--ZX"},"source":["Generamos el fichero de salida segun el Submission format"]},{"cell_type":"markdown","metadata":{"id":"F88F_Otb-lEu"},"source":["* Realizamos la predicción sobre el test"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"K7vljp6nts7P"},"outputs":[],"source":["y_pred = model.predict(X_test)"]},{"cell_type":"markdown","metadata":{"id":"OChzCEHnIc2u"},"source":["* Redondeamos el resultado"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"QR9j8aQI-9yc"},"outputs":[],"source":["# round the result and cast to int\n","import numpy as np\n","y = np.rint(y_pred) # round\n","y = y.astype(int) # cast to int\n","res = np.hstack(y)\n","\n","res"]},{"cell_type":"markdown","metadata":{"id":"NqiWtFm6ImA9"},"source":["* Generamos el fichero de salida"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"b4tSsUpDDNbJ"},"outputs":[],"source":["# generate output\n","output = pd.DataFrame({ 'city': test['city'], 'year': test['year'], 'weekofyear': test['weekofyear'], \n","                       'total_cases': res})\n","\n","\n","from google.colab import files\n","\n","with open('result.csv', 'w') as f:\n","  output.to_csv(f,  index = False)\n","  \n","\n","files.download('result.csv')\n","\n","output.head()\n"]}],"metadata":{"colab":{"name":"","provenance":[{"file_id":"1ZjbOuNv9KwZhspjMWOYgal4onQoycHRd","timestamp":1674559917245},{"file_id":"16qz_ytRY7Zv__2VNjQ8pKWZ9cEJQsi4u","timestamp":1633946541345},{"file_id":"1__xwm444wwoIiJEs2tvNl2n1qIZRYUkK","timestamp":1633607074046}],"version":""},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}
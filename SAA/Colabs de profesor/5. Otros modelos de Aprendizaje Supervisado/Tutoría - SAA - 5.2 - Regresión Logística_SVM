{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1TsErk5F9T3xCxsr0oMtwEDMRH1MJrGjN","timestamp":1674560353621},{"file_id":"18piYgOIiCyVQVK8CvwRkles0HrG0bb5g","timestamp":1632583369559},{"file_id":"1yijtMoIJyk_jNlJ78Ih66ykAvym3h1Y_","timestamp":1550320463717}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Ti5Wnz3cgkRD"},"source":["#  El Problema"]},{"cell_type":"markdown","metadata":{"id":"3wbjJ1PrhsIJ"},"source":["\n","Vamos a comenzar por los datos que nos proporciona una competición de DrivenData \n","\n","[Warm Up: Machine Learning with a Heart](https://www.drivendata.org/competitions/54/machine-learning-with-a-heart/)\n","\n","El conjunto de datos es un clásico del aprendizaje automático. Procede de un estudio de enfermedades cardíacas realizado hace 30 años. \n","\n","El estudio, convenientemente anonimizado,  recoge varias mediciones sobre la salud de los pacientes y las estadísticas cardiovasculares.\n","\n","\n","En primer lugar vamos a estudiar el conjunto de entrenamiento que facilita la competición en este [link](https://www.drivendata.org/competitions/54/machine-learning-with-a-heart/data/) (Previa participación en la misma)\n","\n","También disponibles en el Github del curso [enlace](https://github.com/curso-iabd-uclm/machinelearning/tree/main/datasets/heart_diseases)"]},{"cell_type":"markdown","metadata":{"id":"Yo0x5dyH5b4N"},"source":["# Setting Preliminares"]},{"cell_type":"markdown","metadata":{"id":"EqpW7cG5n4HB"},"source":["Antes de empezar cualquier análisis hay que asegurar que las librerías básicas y de uso general (numpy, pandas, etc.) están correctamente importadas. "]},{"cell_type":"code","metadata":{"id":"QcqAjsMIKluO","executionInfo":{"status":"ok","timestamp":1674560379310,"user_tz":-60,"elapsed":2378,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"}}},"source":["# carga de datos\n","import pandas as pd\n","import io\n","from google.colab import files\n","# manipulación y visualización\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import itertools\n","import seaborn as sns\n","\n"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fvxDPxPhheSW"},"source":["# Carga de Datos"]},{"cell_type":"markdown","metadata":{"id":"AygZwiVvg6WE"},"source":["En primer lugar cargamos los datos dentro del entorno con las funcionalidades que nos permite Google Colab"]},{"cell_type":"code","metadata":{"id":"6CRmTmk-6Mc2","executionInfo":{"status":"ok","timestamp":1674560379312,"user_tz":-60,"elapsed":68,"user":{"displayName":"Rafael del Castillo Gomariz","userId":"02979686593806013183"}}},"source":["def upload_files ():\n","  uploaded = files.upload()\n","  for fn in uploaded.keys():\n","    print('User uploaded file \"{name}\" with length {length} bytes'.format(\n","        name=fn, length=len(uploaded[fn])))\n","    df = pd.read_csv(io.StringIO(uploaded[fn].decode('utf-8')))\n","    return df"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hzKJCzUU61r6"},"source":["En primer lugar subimos los datos de los pacientes de entrenamiento con sus características"]},{"cell_type":"code","metadata":{"id":"CRnebroi6Pwc","colab":{"base_uri":"https://localhost:8080/","height":38},"outputId":"d9dfad52-ae3e-44f8-f680-dceec722d692"},"source":["train_feat = upload_files()\n","train_feat.head()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-3cc2da9d-8e50-4a76-81a8-70d8e1f351fb\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-3cc2da9d-8e50-4a76-81a8-70d8e1f351fb\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"dUXIc3VN7gUE"},"source":["Posteriormente subimos los datos que únicamente nos proporcionan las \"labels\" de estos pacientes."]},{"cell_type":"code","metadata":{"id":"GE8BnvDD7olL"},"source":["train_labels = upload_files()\n","train_labels.head()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_8_EGboS8mVY"},"source":["Mezclamos los dos conjuntos de datos para tenerlos en un único dataframe"]},{"cell_type":"code","metadata":{"id":"ecIvw87W9A-j"},"source":["train = pd.merge(train_feat,train_labels,on='patient_id')\n","\n","train.head()\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gXy9mkxn7yIh"},"source":["Finalmente subimos los datos para generar la evaluación final. "]},{"cell_type":"code","metadata":{"id":"vUWoUirN8TQ7"},"source":["test = upload_files()\n","test.head()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dZSaoCMRAq8m"},"source":["# Preproceso\n","\n","Aquí irían todas las funciones y transformaciones que permitieran el uso de las variables en los siguientes clasificadores, por ejemplo la transformación de las variables categóricas en numéricas, etc."]},{"cell_type":"code","metadata":{"id":"L7NeQw_TCi0w"},"source":["selected_features = ['resting_blood_pressure', 'serum_cholesterol_mg_per_dl', 'max_heart_rate_achieved']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"79Y4-OO2Yxw8"},"source":["Y para poder hacer el \"tuning\" de nuestro modelos necesitamos que nuestros datos de entrenamiento estén a su vez divididos entre entrenamiento y test (sobre todo porque no contamos con la evaluación de la competición)"]},{"cell_type":"code","metadata":{"id":"2AA3pgZHsiXN"},"source":["from sklearn.model_selection import train_test_split\n","\n","# feature selection and transformation\n","X = train[selected_features]\n","y = train['heart_disease_present']\n","# train and test\n","X_train, X_test, y_train, y_test = \\\n","        train_test_split(X, y, test_size=.4, random_state=42)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7amRqWKNmxOS"},"source":["Vamos a hacer un SVM pero vamos a probar a parametrizarlo utilizando una GridSearch"]},{"cell_type":"code","metadata":{"id":"zlz47lWznzTw"},"source":["from sklearn.svm import SVC\n","from sklearn.model_selection import GridSearchCV\n","parameters = {'kernel':('linear', 'rbf'), 'C':[1, 10]}\n","svc = SVC(class_weight=\"balanced\")\n","grid = GridSearchCV(svc, parameters, cv = 5)\n","grid.fit(X_train, y_train)\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vY0-5-kmLXHU"},"source":["clf = grid.best_estimator_\n","clf.fit(X_train, y_train)\n","y_pred = clf.predict(X_test)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TNDhF6xkJN76"},"source":["from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.metrics import classification_report\n","print(classification_report(y_test, y_pred))\n","cm = confusion_matrix(y_test, y_pred, labels=clf.classes_)\n","disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf.classes_)\n","disp.plot()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y4lW2SpVoNHz"},"source":["from sklearn.linear_model import LogisticRegression\n","clf = LogisticRegression(random_state=0, penalty = \"l2\", solver = \"liblinear\", \n","                        class_weight=\"balanced\")\n","clf.fit(X_train, y_train)\n","y_pred = clf.predict(X_test)\n","# evaluación\n","print(classification_report(y_test, y_pred))\n","cm = confusion_matrix(y_test, y_pred, labels=clf.classes_)\n","disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf.classes_)\n","disp.plot()\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ldyr5ctWBXIo"},"source":["Escogemos al mejor y lo ejecutamos sobre el propio test, luego lo ejecutaremos sobre el test final para generar el fichero de subida a la competición."]},{"cell_type":"markdown","metadata":{"id":"ShGIMWrHKi1M"},"source":["# Generar salida para el test de la competición"]},{"cell_type":"code","metadata":{"id":"WpLIbxMtBxXQ"},"source":["res = clf.predict(test[selected_features])\n","output = pd.DataFrame({ 'patient_id': test['patient_id'], 'heart_disease_present': res})\n","output.head()\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Kq3zzh_2DYiT"},"source":["Y guardamos el fichero en disco para luego subirlo a la competición"]},{"cell_type":"code","metadata":{"id":"a7awMx24DXZy"},"source":["from google.colab import files\n","\n","with open('result.csv', 'w') as f:\n","  output.to_csv(f,  index = False)\n","  \n","\n","files.download('result.csv')"],"execution_count":null,"outputs":[]}]}